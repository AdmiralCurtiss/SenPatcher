#include <array>
#include <format>
#include <string>
#include <string_view>
#include <vector>

#include "p3a/pack.h"
#include "p3a/structs.h"
#include "sen/file_getter.h"
#include "sen4/tbl.h"
#include "util/hash/sha1.h"
#include "util/text.h"

extern "C" {
__declspec(dllexport) char SenPatcherFix_0_item[] =
    "Fix incorrect item descriptions and inconsistent formatting.";
__declspec(dllexport) char SenPatcherFix_0_magic[] = "Fix errors in craft descriptions.";
}

namespace SenLib::Sen4::FileFixes::t_item_magic {
static bool AdjustSpacingForBracketed(std::string& s) {
    // does this start with a '['?
    bool shouldAdjust = !s.empty() && s[0] == '[';
    if (!shouldAdjust) {
        return false;
    }

    std::string out;

    size_t idx = 0;
    while (idx < s.size()) {
        if (s[idx] == '\n') {
            // go to next line
            out += "\n  ";

            ++idx;
            while (idx < s.size()) {
                if (s[idx] == ' ') {
                    ++idx;
                } else {
                    break;
                }
            }

            // resume standard text handling
        } else {
            out += s[idx];
            ++idx;
        }
    }

    if (out == s) {
        return false;
    }

    s = std::move(out);
    return true;
}

bool TryApply(const SenPatcher::GetCheckedFileCallback& getCheckedFile,
              std::vector<SenPatcher::P3APackFile>& result) {
    try {
        auto file = getCheckedFile(
            "data/text/dat_en/t_magic.tbl",
            162190,
            HyoutaUtils::Hash::SHA1FromHexString("2c71852245a5d7a10c5c7e687e4a095ac1f54b60"));
        if (!file) {
            return false;
        }
        auto file_item_en = getCheckedFile(
            "data/text/dat_en/t_item_en.tbl",
            484211,
            HyoutaUtils::Hash::SHA1FromHexString("4e83e0152b272f6e7739c89a07c1b0c5e2499e8a"));
        if (!file_item_en) {
            return false;
        }

        auto& bin = file->Data;
        auto& bin_item_en = file_item_en->Data;
        Tbl tbl_en(bin.data(), bin.size(), HyoutaUtils::EndianUtils::Endianness::LittleEndian);
        Tbl tbl_item_en(bin_item_en.data(),
                        bin_item_en.size(),
                        HyoutaUtils::EndianUtils::Endianness::LittleEndian);

        // Divine Knight stuff first

        // Spirit: Claims 25 CP but actually restores 30. Two copies (mech and partner)
        {
            auto& e = tbl_en.Entries[413];
            MagicData m(e.Data.data(), e.Data.size());
            m.desc = HyoutaUtils::TextUtils::ReplaceSubstring(m.desc, 83, 2, "30");
            e.Data = m.ToBinary();
        }
        {
            auto& e = tbl_en.Entries[414];
            MagicData m(e.Data.data(), e.Data.size());
            m.desc = HyoutaUtils::TextUtils::ReplaceSubstring(m.desc, 83, 2, "30");
            e.Data = m.ToBinary();
        }

        // Tempete Rouge: Uses the autogenerated description, which is formatted weirdly. We can
        // copy and adapt the description from Moulin Rouge.
        {
            auto& e = tbl_en.Entries[438];
            auto& e2 = tbl_en.Entries[439];
            MagicData m(e.Data.data(), e.Data.size());
            MagicData m2(e2.Data.data(), e2.Data.size());
            m.flags += 'Z';
            m.desc = m2.desc.substr(0, 108) + m.desc;
            m.desc[48] = '3';
            m.desc = HyoutaUtils::TextUtils::ReplaceSubstring(m.desc, 33, 2, "D");
            m.desc = HyoutaUtils::TextUtils::ReplaceSubstring(m.desc, 20, 1, "A");
            e.Data = m.ToBinary();
        }

        // Void Breaker/2: Listed as ADF/DEF down but usually DEF is listed first.
        {
            auto& e = tbl_en.Entries[444];
            MagicData m(e.Data.data(), e.Data.size());
            std::swap(m.desc[99], m.desc[103]);
            std::swap(m.desc[100], m.desc[104]);
            std::swap(m.desc[101], m.desc[105]);
            e.Data = m.ToBinary();
        }
        {
            auto& e = tbl_en.Entries[445];
            MagicData m(e.Data.data(), e.Data.size());
            std::swap(m.desc[98], m.desc[102]);
            std::swap(m.desc[99], m.desc[103]);
            std::swap(m.desc[100], m.desc[104]);
            e.Data = m.ToBinary();
        }

        // Shock Breaker: Autogenerated, copy from Void Breaker
        {
            auto& e = tbl_en.Entries[443];
            auto& e2 = tbl_en.Entries[444];
            MagicData m(e.Data.data(), e.Data.size());
            MagicData m2(e2.Data.data(), e2.Data.size());
            m.flags += 'Z';
            m.desc = m2.desc.substr(0, 129) + m.desc;
            m.desc = HyoutaUtils::TextUtils::Insert(m.desc, 124, " - #11CDelay +10#0C");
            m.desc = HyoutaUtils::TextUtils::Remove(m.desc, 70, 23);
            m.desc = HyoutaUtils::TextUtils::ReplaceSubstring(m.desc, 35, 1, "A+");
            e.Data = m.ToBinary();
        }

        // Power Smash: Autogenerated, copy from Chaos Saber
        {
            auto& e = tbl_en.Entries[446];
            auto& e2 = tbl_en.Entries[449];
            MagicData m(e.Data.data(), e.Data.size());
            MagicData m2(e2.Data.data(), e2.Data.size());
            m.flags += 'Z';
            m.desc = m2.desc.substr(0, 96) + m.desc;
            m.desc[48] = '7';
            m.desc = HyoutaUtils::TextUtils::Insert(m.desc, 35, "+");
            m.desc[21] = 'B';
            e.Data = m.ToBinary();
        }

        // Salamander: Autogenerated, copy from Chaos Saber
        {
            auto& e = tbl_en.Entries[447];
            auto& e2 = tbl_en.Entries[449];
            MagicData m(e.Data.data(), e.Data.size());
            MagicData m2(e2.Data.data(), e2.Data.size());
            m.flags += 'Z';
            m.desc = m2.desc.substr(0, 96) + m.desc;
            m.desc = HyoutaUtils::TextUtils::Insert(m.desc, 91, " - #11CDelay +10#0C");
            m.desc = HyoutaUtils::TextUtils::ReplaceSubstring(m.desc, 75, 6, "Burn");
            m.desc[48] = '1';
            m.desc = HyoutaUtils::TextUtils::ReplaceSubstring(m.desc, 34, 1, "A+");
            m.desc[21] = 'S';
            e.Data = m.ToBinary();
        }

        // Resonant Beat: Swap the two effects so the immediate heal is listed before the over-time
        // one.
        {
            auto& e = tbl_en.Entries[481];
            MagicData m(e.Data.data(), e.Data.size());
            m.desc = HyoutaUtils::TextUtils::MoveSubstring(m.desc, 61, 26, 25);
            e.Data = m.ToBinary();
        }

        // Resounding Beat: Autogenerated, copy from Resonant Beat
        {
            auto& e = tbl_en.Entries[480];
            auto& e2 = tbl_en.Entries[481];
            MagicData m(e.Data.data(), e.Data.size());
            MagicData m2(e2.Data.data(), e2.Data.size());
            m.flags += 'Z';
            m.desc = m2.desc.substr(0, 91) + m.desc;
            m.desc = HyoutaUtils::TextUtils::ReplaceSubstring(m.desc, 20, 3, "Self");
            e.Data = m.ToBinary();
        }

        // Wild Rage: Autogenerated, copy from Unbound Rage
        {
            auto& e = tbl_en.Entries[487];
            auto& e2 = tbl_en.Entries[495];
            MagicData m(e.Data.data(), e.Data.size());
            MagicData m2(e2.Data.data(), e2.Data.size());
            m.flags += 'Z';
            m.desc = m2.desc.substr(0, 93) + m.desc;
            m.desc = HyoutaUtils::TextUtils::Remove(m.desc, 29, 32);
            m.desc = HyoutaUtils::TextUtils::ReplaceSubstring(m.desc, 35, 1, "12");
            e.Data = m.ToBinary();
        }

        // All of these say 'One' as the target but they can only target yourself, so it'd be nicer
        // to say 'Self'.
        for (int idx : {415, 416, 482, 483, 486, 487, 488, 493, 494, 495, 496, 498}) {
            auto& e = tbl_en.Entries[static_cast<size_t>(idx)];
            MagicData m(e.Data.data(), e.Data.size());
            auto pos = m.desc.find("One");
            if (pos != std::string::npos) {
                m.desc = HyoutaUtils::TextUtils::ReplaceSubstring(m.desc, pos, 3, "Self");
            }
            e.Data = m.ToBinary();
        }

        // A lot of the Divine Knight attacks have the 'Unblockable' trait that is completely
        // omitted in the English descriptions. Fix that.
        for (size_t i = 0; i < tbl_en.Entries.size(); ++i) {
            auto& e = tbl_en.Entries[i];
            if (e.Name == "magic") {
                MagicData m(e.Data.data(), e.Data.size());
                if (m.idx >= 5050 && m.idx <= 5545 && m.effects[1].idx == 192
                    && m.flags.find('Z') != std::string::npos) {
                    auto endpos = m.desc.find("]");
                    if (endpos != std::string::npos && endpos > 0) {
                        m.desc = HyoutaUtils::TextUtils::Insert(
                            m.desc, endpos - 1, " - #11CUnblockable#0C");
                        e.Data = m.ToBinary();
                    }
                }
            }
        }

        // fix a common spacing error
        for (size_t i = 0; i < tbl_en.Entries.size(); ++i) {
            auto& e = tbl_en.Entries[i];
            if (e.Name == "magic") {
                MagicData m(e.Data.data(), e.Data.size());
                if (m.desc.find("-#11C") != std::string::npos) {
                    m.desc = HyoutaUtils::TextUtils::Replace(m.desc, "-#11C", "- #11C");
                    e.Data = m.ToBinary();
                }
            }
        }

        // These weirdly use a & instead of a - to split the effects
        for (int idx : {94, 98, 114, 119, 251}) {
            auto& e = tbl_en.Entries[static_cast<size_t>(idx)];
            MagicData m(e.Data.data(), e.Data.size());
            m.desc = HyoutaUtils::TextUtils::Replace(m.desc, "&", "-");
            e.Data = m.ToBinary();
        }

        // Balance Down is inconsistently formatted with every other status effect. Fix this.
        for (size_t i = 0; i < tbl_en.Entries.size(); ++i) {
            auto& e = tbl_en.Entries[i];
            if (e.Name == "magic") {
                MagicData m(e.Data.data(), e.Data.size());
                auto bd = m.desc.find("Balance Down");
                if (bd != std::string::npos) {
                    auto nextOpenParens = m.desc.find('(', bd + 12);
                    if (nextOpenParens != std::string::npos) {
                        auto nextCloseParens = m.desc.find(')', nextOpenParens + 1);
                        if (nextCloseParens != std::string::npos) {
                            auto contents = std::string_view(m.desc).substr(
                                nextOpenParens + 1, nextCloseParens - (nextOpenParens + 1));
                            auto percent = contents.find('%');
                            if (percent == std::string_view::npos) {
                                // no percent, this is missing a "(100%)"
                                m.desc = HyoutaUtils::TextUtils::Insert(
                                    m.desc, nextOpenParens, "(100%) ");
                            } else {
                                // this may have an extra 'chance' after the percent
                                m.desc = HyoutaUtils::TextUtils::Remove(
                                    m.desc,
                                    nextOpenParens + percent + 2,
                                    nextCloseParens - (nextOpenParens + percent + 2));
                            }
                            e.Data = m.ToBinary();
                        }
                    }
                }
            }
        }

        // Impassion: "Restores XX CP" is inconsistent with the usual phrasing of "CP+XX".
        {
            auto& e = tbl_en.Entries[35];
            MagicData m(e.Data.data(), e.Data.size());
            m.desc = HyoutaUtils::TextUtils::ReplaceSubstring(m.desc, 36, 14, "CP+30");
            e.Data = m.ToBinary();
        }

        // Heat Up: "Restores XX CP" is inconsistent with the usual phrasing of "CP+XX".
        {
            auto& e = tbl_en.Entries[38];
            MagicData m(e.Data.data(), e.Data.size());
            m.desc = HyoutaUtils::TextUtils::ReplaceSubstring(m.desc, 36, 14, "CP+20");
            e.Data = m.ToBinary();
        }

        // Crimson Slash: Burn is 20%, not 30%
        {
            auto& e = tbl_en.Entries[69];
            MagicData m(e.Data.data(), e.Data.size());
            m.desc[104] = '2';
            e.Data = m.ToBinary();
        }

        // Demon Unchained: Missing space between "(L)" and "(3 turns)"
        {
            auto& e = tbl_en.Entries[74];
            MagicData m(e.Data.data(), e.Data.size());
            m.desc = HyoutaUtils::TextUtils::Insert(m.desc, 64, " ");
            e.Data = m.ToBinary();
        }

        // Rosetta Arrow: This is completely wrong, it's using Flamberge's stats.
        {
            auto& e = tbl_en.Entries[96];
            MagicData m(e.Data.data(), e.Data.size());
            m.desc = HyoutaUtils::TextUtils::Insert(m.desc, 118, " - #11CCritical rate+25%#0C");
            m.desc = HyoutaUtils::TextUtils::ReplaceSubstring(m.desc, 112, 1, "5");
            m.desc = HyoutaUtils::TextUtils::ReplaceSubstring(m.desc, 67, 1, "M+");
            m.desc = HyoutaUtils::TextUtils::ReplaceSubstring(m.desc, 48, 1, "2");
            m.desc = HyoutaUtils::TextUtils::Insert(m.desc, 35, "+");
            m.desc = HyoutaUtils::TextUtils::ReplaceSubstring(m.desc, 20, 2, "A");
            e.Data = m.ToBinary();
        }

        // True/Radiant Wings: The HP recovery is over time, not instant.
        {
            auto& e = tbl_en.Entries[114];
            MagicData m(e.Data.data(), e.Data.size());
            m.desc = HyoutaUtils::TextUtils::Insert(m.desc, 72, " (4 turns)");
            e.Data = m.ToBinary();
        }
        {
            auto& e = tbl_en.Entries[119];
            MagicData m(e.Data.data(), e.Data.size());
            m.desc = HyoutaUtils::TextUtils::Insert(m.desc, 73, " (4 turns)");
            e.Data = m.ToBinary();
        }

        // Cross Break: Power is C+, not C++
        {
            auto& e = tbl_en.Entries[196];
            MagicData m(e.Data.data(), e.Data.size());
            m.desc = HyoutaUtils::TextUtils::Remove(m.desc, 23, 1);
            e.Data = m.ToBinary();
        }
        {
            auto& e = tbl_en.Entries[207];
            MagicData m(e.Data.data(), e.Data.size());
            m.desc = HyoutaUtils::TextUtils::Remove(m.desc, 23, 1);
            e.Data = m.ToBinary();
        }

        // Twilit Blades: Power E, not D
        {
            auto& e = tbl_en.Entries[215];
            MagicData m(e.Data.data(), e.Data.size());
            m.desc = HyoutaUtils::TextUtils::ReplaceSubstring(m.desc, 20, 1, "E");
            e.Data = m.ToBinary();
        }

        // Tempest Edge: Power A+, not S
        {
            auto& e = tbl_en.Entries[217];
            MagicData m(e.Data.data(), e.Data.size());
            m.desc = HyoutaUtils::TextUtils::ReplaceSubstring(m.desc, 21, 1, "A+");
            e.Data = m.ToBinary();
        }

        // Summon Kestrel 2: Power SSS+, not SS
        {
            auto& e = tbl_en.Entries[247];
            MagicData m(e.Data.data(), e.Data.size());
            m.desc = HyoutaUtils::TextUtils::Insert(m.desc, 23, "S+");
            e.Data = m.ToBinary();
        }

        // Rumbling Smash: Faint is 20%, not 30%
        {
            auto& e = tbl_en.Entries[249];
            MagicData m(e.Data.data(), e.Data.size());
            m.desc = HyoutaUtils::TextUtils::ReplaceSubstring(m.desc, 105, 1, "2");
            e.Data = m.ToBinary();
        }

        // Reaper's Whirlwind 2: Typo, "(60)%" should be "(60%)"
        {
            auto& e = tbl_en.Entries[257];
            MagicData m(e.Data.data(), e.Data.size());
            std::swap(m.desc[108], m.desc[109]);
            e.Data = m.ToBinary();
        }

        // Requiem Shot: Extra linebreak.
        {
            auto& e = tbl_en.Entries[279];
            MagicData m(e.Data.data(), e.Data.size());
            m.desc = HyoutaUtils::TextUtils::ReplaceSubstring(m.desc, 171, 1, " ");
            e.Data = m.ToBinary();
        }

        // Happy Trigger: Extra linebreak.
        {
            auto& e = tbl_en.Entries[281];
            MagicData m(e.Data.data(), e.Data.size());
            m.desc = HyoutaUtils::TextUtils::ReplaceSubstring(m.desc, 121, 1, " ");
            e.Data = m.ToBinary();
        }

        // Akashic Star: Extra linebreak.
        {
            auto& e = tbl_en.Entries[282];
            MagicData m(e.Data.data(), e.Data.size());
            m.desc = HyoutaUtils::TextUtils::ReplaceSubstring(m.desc, 136, 1, " ");
            e.Data = m.ToBinary();
        }

        // Umbral Butterflies: Dash is colored wrong.
        {
            auto& e = tbl_en.Entries[270];
            MagicData m(e.Data.data(), e.Data.size());
            m.desc = HyoutaUtils::TextUtils::ReplaceSubstring(m.desc, 108, 3, "#0C - #11C");
            e.Data = m.ToBinary();
        }

        // Mortal Mirage: Stats are wrong.
        {
            auto& e = tbl_en.Entries[265];
            MagicData m(e.Data.data(), e.Data.size());
            m.desc = HyoutaUtils::TextUtils::ReplaceSubstring(m.desc, 49, 2, "30");
            m.desc = HyoutaUtils::TextUtils::ReplaceSubstring(m.desc, 34, 2, "D");
            e.Data = m.ToBinary();
        }

        // Frigid Rain: Stats are wrong.
        {
            auto& e = tbl_en.Entries[266];
            MagicData m(e.Data.data(), e.Data.size());
            m.desc = HyoutaUtils::TextUtils::ReplaceSubstring(m.desc, 47, 3, "Yes");
            m.desc = HyoutaUtils::TextUtils::ReplaceSubstring(m.desc, 33, 2, "A");
            e.Data = m.ToBinary();
        }

        // Kaleido Force: Stats are wrong.
        {
            auto& e = tbl_en.Entries[267];
            MagicData m(e.Data.data(), e.Data.size());
            m.desc = HyoutaUtils::TextUtils::ReplaceSubstring(m.desc, 34, 2, "D");
            m.desc = HyoutaUtils::TextUtils::ReplaceSubstring(m.desc, 21, 1, "SSS+");
            e.Data = m.ToBinary();
        }

        // Laevateinn: Stats are wrong.
        {
            auto& e = tbl_en.Entries[276];
            MagicData m(e.Data.data(), e.Data.size());
            m.desc = HyoutaUtils::TextUtils::ReplaceSubstring(m.desc, 48, 2, "+30%");
            m.desc = HyoutaUtils::TextUtils::ReplaceSubstring(m.desc, 34, 2, "B");
            m.desc = HyoutaUtils::TextUtils::ReplaceSubstring(m.desc, 21, 1, "A");
            e.Data = m.ToBinary();
        }

        // Spell Card: Extra linebreak.
        {
            auto& e = tbl_en.Entries[277];
            MagicData m(e.Data.data(), e.Data.size());
            m.desc = HyoutaUtils::TextUtils::ReplaceSubstring(m.desc, 62, 1, " ");
            e.Data = m.ToBinary();
        }

        // Rubrum Knight: Extra linebreak. Stats are wrong.
        {
            auto& e = tbl_en.Entries[278];
            MagicData m(e.Data.data(), e.Data.size());
            m.desc = HyoutaUtils::TextUtils::ReplaceSubstring(m.desc, 169, 1, " ");
            m.desc = HyoutaUtils::TextUtils::ReplaceSubstring(m.desc, 34, 2, "D");
            m.desc = HyoutaUtils::TextUtils::ReplaceSubstring(m.desc, 21, 1, "SSS+");
            e.Data = m.ToBinary();
        }

        // Southern Cross: Autogenerated weirdly formatted description, manually write it out.
        {
            auto& e = tbl_en.Entries[559];
            auto& e2 = tbl_en.Entries[568];
            MagicData m(e.Data.data(), e.Data.size());
            MagicData m2(e2.Data.data(), e2.Data.size());
            m.flags += 'Z';
            m.desc = m2.desc.substr(0, 71) + m.desc;
            m.desc = HyoutaUtils::TextUtils::ReplaceSubstring(
                m.desc, 53, 10, "Restores 30% HP/EP#0C - #11CCP+30");
            m.desc = HyoutaUtils::TextUtils::ReplaceSubstring(m.desc, 39, 1, "7");
            m.desc = HyoutaUtils::TextUtils::ReplaceSubstring(m.desc, 13, 1, "8");
            e.Data = m.ToBinary();
        }

        // Cold Nail: Missing (Set) for area.
        {
            auto& e = tbl_en.Entries[296];
            MagicData m(e.Data.data(), e.Data.size());
            m.desc = HyoutaUtils::TextUtils::Insert(m.desc, 66, " (Set)");
            e.Data = m.ToBinary();
        }

        // Piercing Blitz: Stats are wrong.
        {
            auto& e = tbl_en.Entries[297];
            MagicData m(e.Data.data(), e.Data.size());
            m.desc = HyoutaUtils::TextUtils::ReplaceSubstring(m.desc, 49, 2, "+20%");
            m.desc = HyoutaUtils::TextUtils::ReplaceSubstring(m.desc, 35, 2, "D");
            m.desc = HyoutaUtils::TextUtils::Remove(m.desc, 22, 1);
            e.Data = m.ToBinary();
        }

        // Javelin Throw: Claims (Set) but isn't.
        {
            auto& e = tbl_en.Entries[353];
            MagicData m(e.Data.data(), e.Data.size());
            m.desc = HyoutaUtils::TextUtils::Remove(m.desc, 69, 6);
            e.Data = m.ToBinary();
        }

        // Brutal Spin: Claims (Set) but isn't.
        {
            auto& e = tbl_en.Entries[355];
            MagicData m(e.Data.data(), e.Data.size());
            m.desc = HyoutaUtils::TextUtils::Remove(m.desc, 67, 6);
            e.Data = m.ToBinary();
        }

        // Destructive Buster: Claims 4B+ power, not sure how that got here...
        {
            auto& e = tbl_en.Entries[356];
            MagicData m(e.Data.data(), e.Data.size());
            m.desc = HyoutaUtils::TextUtils::Remove(m.desc, 21, 1);
            e.Data = m.ToBinary();
        }

        // The 5 existing dis-orders all have descriptions and 4 of them are wrong lol, and all of
        // them call them Anti-Order instead of Dis-Order. I don't think this actually matters, I
        // don't think you can ever see these naturally, but might as well fix them...
        {
            auto& e = tbl_en.Entries[581];
            MagicData m(e.Data.data(), e.Data.size());
            m.desc = HyoutaUtils::TextUtils::ReplaceSubstring(m.desc, m.desc.size() - 10, 4, "Dis");
            m.desc = HyoutaUtils::TextUtils::ReplaceSubstring(m.desc, 35, 1, "1");
            e.Data = m.ToBinary();
        }
        {
            auto& e = tbl_en.Entries[582];
            MagicData m(e.Data.data(), e.Data.size());
            m.desc = HyoutaUtils::TextUtils::ReplaceSubstring(m.desc, m.desc.size() - 10, 4, "Dis");
            m.desc = HyoutaUtils::TextUtils::ReplaceSubstring(m.desc, 40, 1, "1");
            e.Data = m.ToBinary();
        }
        {
            auto& e = tbl_en.Entries[583];
            MagicData m(e.Data.data(), e.Data.size());
            m.desc = HyoutaUtils::TextUtils::ReplaceSubstring(m.desc, m.desc.size() - 10, 4, "Dis");
            m.desc = HyoutaUtils::TextUtils::Insert(m.desc, 34, " ");
            e.Data = m.ToBinary();
        }
        {
            auto& e = tbl_en.Entries[584];
            MagicData m(e.Data.data(), e.Data.size());
            m.desc = HyoutaUtils::TextUtils::ReplaceSubstring(m.desc, m.desc.size() - 10, 4, "Dis");
            m.desc = HyoutaUtils::TextUtils::Remove(m.desc, 35, 1);
            e.Data = m.ToBinary();
        }
        {
            auto& e = tbl_en.Entries[585];
            MagicData m(e.Data.data(), e.Data.size());
            m.desc = HyoutaUtils::TextUtils::ReplaceSubstring(m.desc, m.desc.size() - 10, 4, "Dis");
            m.desc = HyoutaUtils::TextUtils::Remove(m.desc, 40, 1);
            e.Data = m.ToBinary();
        }

        // Gale, Arcane Gale, Howling Heavens, True Howling Heavens: These have autogenerated
        // descriptions and they're *technically* fine, but I want to add a space for "Delay+2" and
        // similar so we need to write them out.
        {
            auto& e = tbl_en.Entries[71];
            auto& e2 = tbl_en.Entries[84];
            MagicData m(e.Data.data(), e.Data.size());
            MagicData m2(e2.Data.data(), e2.Data.size());
            m.flags += 'Z';
            m.desc = m2.desc.substr(0, 120) + m.desc;
            m.desc = HyoutaUtils::TextUtils::Remove(m.desc, 95, 20);
            m.desc = HyoutaUtils::TextUtils::ReplaceSubstring(m.desc, 91, 1, "2");
            m.desc = HyoutaUtils::TextUtils::ReplaceSubstring(m.desc, 49, 2, "5");
            m.desc = HyoutaUtils::TextUtils::Remove(m.desc, 35, 1);
            m.desc = HyoutaUtils::TextUtils::ReplaceSubstring(m.desc, 21, 1, "B+");
            e.Data = m.ToBinary();
        }
        {
            auto& e = tbl_en.Entries[77];
            auto& e2 = tbl_en.Entries[84];
            MagicData m(e.Data.data(), e.Data.size());
            MagicData m2(e2.Data.data(), e2.Data.size());
            m.flags += 'Z';
            m.desc = m2.desc.substr(0, 120) + m.desc;
            m.desc = HyoutaUtils::TextUtils::Remove(m.desc, 95, 20);
            m.desc = HyoutaUtils::TextUtils::ReplaceSubstring(m.desc, 91, 1, "2");
            m.desc = HyoutaUtils::TextUtils::ReplaceSubstring(m.desc, 49, 2, "5");
            m.desc = HyoutaUtils::TextUtils::ReplaceSubstring(m.desc, 21, 1, "D+");
            e.Data = m.ToBinary();
        }
        {
            auto& e = tbl_en.Entries[161];
            auto& e2 = tbl_en.Entries[84];
            MagicData m(e.Data.data(), e.Data.size());
            MagicData m2(e2.Data.data(), e2.Data.size());
            m.flags += 'Z';
            m.desc = m2.desc.substr(0, 120) + m.desc;
            m.desc = HyoutaUtils::TextUtils::Remove(m.desc, 95, 20);
            m.desc = HyoutaUtils::TextUtils::ReplaceSubstring(m.desc, 91, 1, "8");
            m.desc = HyoutaUtils::TextUtils::Insert(m.desc, 85, "Absolute ");
            m.desc = HyoutaUtils::TextUtils::ReplaceSubstring(m.desc, 64, 11, "ll");
            m.desc = HyoutaUtils::TextUtils::ReplaceSubstring(m.desc, 48, 4, "No");
            m.desc = HyoutaUtils::TextUtils::ReplaceSubstring(m.desc, 34, 2, "D");
            m.desc = HyoutaUtils::TextUtils::ReplaceSubstring(m.desc, 21, 1, "4S");
            e.Data = m.ToBinary();
        }
        {
            auto& e = tbl_en.Entries[166];
            auto& e2 = tbl_en.Entries[84];
            MagicData m(e.Data.data(), e.Data.size());
            MagicData m2(e2.Data.data(), e2.Data.size());
            m.flags += 'Z';
            m.desc = m2.desc.substr(0, 120) + m.desc;
            m.desc = HyoutaUtils::TextUtils::Remove(m.desc, 95, 20);
            m.desc = HyoutaUtils::TextUtils::ReplaceSubstring(m.desc, 91, 1, "12");
            m.desc = HyoutaUtils::TextUtils::Insert(m.desc, 85, "Absolute ");
            m.desc = HyoutaUtils::TextUtils::ReplaceSubstring(m.desc, 64, 11, "ll");
            m.desc = HyoutaUtils::TextUtils::ReplaceSubstring(m.desc, 48, 4, "No");
            m.desc = HyoutaUtils::TextUtils::ReplaceSubstring(m.desc, 34, 2, "D");
            m.desc = HyoutaUtils::TextUtils::ReplaceSubstring(m.desc, 21, 1, "4S+");
            e.Data = m.ToBinary();
        }

        // Unbound Rage: The CP recovery is gradual (2 turns)
        {
            auto& e = tbl_en.Entries[251];
            MagicData m(e.Data.data(), e.Data.size());
            m.desc = HyoutaUtils::TextUtils::Insert(m.desc, 35, " (2 turns)");
            e.Data = m.ToBinary();
        }

        // Remedy Fantasia/2, Aura Rain: These are healing S-Crafts that have extra effects at 200
        // CP and they're listed *really strangely*, in parenthesis next to an unrelated effect.
        // Make this more sensible. Aura Rain also gets some extra formatting fixes ("Cures All" ->
        // "Cures K.O., ailments, & Stat Down", "Restores All HP" -> "Restores all HP")
        {
            auto& e = tbl_en.Entries[106];
            MagicData m(e.Data.data(), e.Data.size());
            std::string color = m.desc.substr(20, 10);
            std::string effect = m.desc.substr(70, 23);
            effect = "Restores " + HyoutaUtils::TextUtils::Insert(effect, 3, " HP");
            m.desc = HyoutaUtils::TextUtils::ReplaceSubstring(m.desc, 65, 29, color + effect);
            e.Data = m.ToBinary();
        }
        {
            auto& e = tbl_en.Entries[110];
            MagicData m(e.Data.data(), e.Data.size());
            std::string color = m.desc.substr(20, 10);
            std::string effect = m.desc.substr(70, 23);
            effect = "Restores " + HyoutaUtils::TextUtils::Insert(effect, 3, " HP");
            m.desc = HyoutaUtils::TextUtils::Insert(m.desc, 119, color + effect);
            m.desc = HyoutaUtils::TextUtils::Remove(m.desc, 65, 29);
            e.Data = m.ToBinary();
        }
        {
            auto& e = tbl_en.Entries[322];
            MagicData m(e.Data.data(), e.Data.size());
            std::string color = m.desc.substr(30, 10);
            std::string effect = m.desc.substr(76, 25);
            m.desc = HyoutaUtils::TextUtils::ReplaceSubstring(
                m.desc, 71, 31, "K.O., ailments, & Stat Down" + color + effect);
            m.desc = HyoutaUtils::TextUtils::ReplaceSubstring(m.desc, 117, 1, "a");
            m.desc = HyoutaUtils::TextUtils::ReplaceSubstring(m.desc, 49, 1, "a");
            e.Data = m.ToBinary();
        }

        // Spiral Arts: Restores All EP -> Restores all EP
        {
            auto& e = tbl_en.Entries[572];
            MagicData m(e.Data.data(), e.Data.size());
            m.desc = HyoutaUtils::TextUtils::ReplaceSubstring(m.desc, 60, 1, "a");
            e.Data = m.ToBinary();
        }

        // Recuria: Extra space
        {
            auto& e = tbl_en.Entries[45];
            MagicData m(e.Data.data(), e.Data.size());
            m.desc = HyoutaUtils::TextUtils::Remove(m.desc, 55, 1);
            e.Data = m.ToBinary();
        }

        // Golden Sphere: Extra space
        {
            auto& e = tbl_en.Entries[52];
            MagicData m(e.Data.data(), e.Data.size());
            m.desc = HyoutaUtils::TextUtils::Remove(m.desc, 83, 1);
            e.Data = m.ToBinary();
        }

        // Mail Breaker: This has a shift-jis style wide space at the end of the string, probably
        // harmless but remove it...
        {
            auto& e = tbl_en.Entries[121];
            MagicData m(e.Data.data(), e.Data.size());
            m.desc = HyoutaUtils::TextUtils::Remove(m.desc, 208, 3);
            e.Data = m.ToBinary();
        }

        // Leanan's Kiss: The stat-up doesn't list a turn count, interestingly enough not even in
        // the autogenerated description or in the JP text. Testing suggests it's 3 turns.
        // Also "Restores 100 CP" -> "CP+100" for consistency.
        {
            auto& e = tbl_en.Entries[65];
            MagicData m(e.Data.data(), e.Data.size());
            m.desc = HyoutaUtils::TextUtils::Insert(m.desc, 88, " (3 turns)");
            m.desc = HyoutaUtils::TextUtils::ReplaceSubstring(m.desc, 57, 15, "CP+100");
            e.Data = m.ToBinary();
        }

        // Military Might: Miscolored dash
        {
            auto& e = tbl_en.Entries[274];
            MagicData m(e.Data.data(), e.Data.size());
            m.desc = HyoutaUtils::TextUtils::ReplaceSubstring(m.desc, 48, 3, "#0C - #11C");
            e.Data = m.ToBinary();
        }

        // Earth Pulse: "Restores HP (25%)" -> "Restores 25% HP" for consistency.
        {
            auto& e = tbl_en.Entries[17];
            MagicData m(e.Data.data(), e.Data.size());
            std::string effect = m.desc.substr(50, 3);
            m.desc = HyoutaUtils::TextUtils::ReplaceSubstring(m.desc, 46, 8, effect + " HP");
            e.Data = m.ToBinary();
        }

        // Grail Thelas: "Restores HP (200%)" -> "Restores 200% HP" for consistency.
        {
            auto& e = tbl_en.Entries[66];
            MagicData m(e.Data.data(), e.Data.size());
            std::string effect = m.desc.substr(80, 4);
            m.desc = HyoutaUtils::TextUtils::ReplaceSubstring(m.desc, 76, 9, effect + " HP");
            e.Data = m.ToBinary();
        }

        // Heavenly Gift/2: Unclear whether the HP Recovery and CP+ is immediate or over time (both
        // are the latter), make it clearer.
        {
            auto& e = tbl_en.Entries[94];
            MagicData m(e.Data.data(), e.Data.size());
            m.desc = HyoutaUtils::TextUtils::ReplaceSubstring(m.desc, 72, 1, "-");
            m.desc = HyoutaUtils::TextUtils::Insert(m.desc, 68, " (3 turns)");
            m.desc = HyoutaUtils::TextUtils::Insert(m.desc, 53, " (3 turns)");
            m.desc = HyoutaUtils::TextUtils::ReplaceSubstring(m.desc, 54, 19, "& ");
            e.Data = m.ToBinary();
        }
        {
            auto& e = tbl_en.Entries[98];
            MagicData m(e.Data.data(), e.Data.size());
            m.desc = HyoutaUtils::TextUtils::ReplaceSubstring(m.desc, 73, 1, "-");
            m.desc = HyoutaUtils::TextUtils::Insert(m.desc, 69, " (3 turns)");
            m.desc = HyoutaUtils::TextUtils::Insert(m.desc, 54, " (3 turns)");
            m.desc = HyoutaUtils::TextUtils::ReplaceSubstring(m.desc, 55, 19, "& ");
            e.Data = m.ToBinary();
        }

        // Brave Smash: Extra space
        {
            auto& e = tbl_en.Entries[198];
            MagicData m(e.Data.data(), e.Data.size());
            m.desc = HyoutaUtils::TextUtils::Remove(m.desc, 86, 1);
            e.Data = m.ToBinary();
        }

        // Cutie Bullet: Extra space
        {
            auto& e = tbl_en.Entries[239];
            MagicData m(e.Data.data(), e.Data.size());
            m.desc = HyoutaUtils::TextUtils::Remove(m.desc, 87, 1);
            e.Data = m.ToBinary();
        }

        // A few orders have "Break Damage" with an uppercase D which is inconsistent with other
        // Orders and CS3/Reverie
        for (int idx : {513, 514, 556, 569}) {
            auto& e = tbl_en.Entries[static_cast<size_t>(idx)];
            MagicData m(e.Data.data(), e.Data.size());
            auto pos = m.desc.find("k D");
            if (pos != std::string::npos) {
                m.desc = HyoutaUtils::TextUtils::ReplaceSubstring(m.desc, pos + 2, 1, "d");
                e.Data = m.ToBinary();
            }
        }

        // Ebon Dragon: Listed as "Strike" but should be "Critical"
        {
            auto& e = tbl_en.Entries[551];
            MagicData m(e.Data.data(), e.Data.size());
            m.desc = HyoutaUtils::TextUtils::ReplaceSubstring(m.desc, 2, 6, "Critical");
            e.Data = m.ToBinary();
        }

        // Proud Warrior: Listed as "Magic" but should be "Attack"
        {
            auto& e = tbl_en.Entries[571];
            MagicData m(e.Data.data(), e.Data.size());
            m.desc = HyoutaUtils::TextUtils::ReplaceSubstring(m.desc, 2, 5, "Attack");
            e.Data = m.ToBinary();
        }

        // Draupnir Guard: Listed as "Arts" but should be "Magic". Autogenerated, so we need to
        // manually write it out.
        {
            auto& e = tbl_en.Entries[578];
            MagicData m(e.Data.data(), e.Data.size());
            m.flags += 'Z';
            m.desc =
                "[ Magic (#11C4 turns#0C/#11CMagic attack absorption#0C) - #11CComplete "
                "Immunity#0C ]\n  "
                + m.desc;
            e.Data = m.ToBinary();
        }


        // Split unrelated effects like "Restores 20 CP/Cures Stat Down" to two separate ones
        for (int idx : {25, 26, 27, 29, 30, 38, 56, 57, 62, 63}) {
            auto& e = tbl_en.Entries[static_cast<size_t>(idx)];
            MagicData m(e.Data.data(), e.Data.size());
            auto slash = m.desc.find('/');
            if (slash != std::string::npos) {
                m.desc = HyoutaUtils::TextUtils::ReplaceSubstring(m.desc, slash, 1, "#0C - #11C");
                e.Data = m.ToBinary();
            }
        }
        for (int idx : {64, 65, 65, 66}) { // 65 twice is intentional, two instances to replace
            auto& e = tbl_en.Entries[static_cast<size_t>(idx)];
            MagicData m(e.Data.data(), e.Data.size());
            auto colon = m.desc.find(':');
            if (colon != std::string::npos) {
                auto slash = m.desc.find('/', colon);
                if (slash != std::string::npos) {
                    m.desc =
                        HyoutaUtils::TextUtils::ReplaceSubstring(m.desc, slash, 1, "#0C - #11C");
                    e.Data = m.ToBinary();
                }
            }
        }

        // Merge cases like "Poison (50%) Petrify (50%)" to "Poison/Petrify (50%)" like Reverie
        for (int idx : {14,  32,  104, 108, 132, 136, 177, 178, 179, 180, 217,
                        223, 237, 244, 250, 255, 257, 270, 276, 314, 316}) {
            auto& e = tbl_en.Entries[static_cast<size_t>(idx)];
            MagicData m(e.Data.data(), e.Data.size());
            auto firstPercentage = m.desc.find("%)");
            if (firstPercentage != std::string::npos) {
                auto next = std::string_view(m.desc).substr(firstPercentage + 2);
                size_t drop = 0;
                if (next.starts_with("#0C #11C")) {
                    drop = 8;
                } else if (next.starts_with(" ")) {
                    drop = 1;
                }
                if (drop > 0) {
                    auto openParens =
                        std::string_view(m.desc).substr(0, firstPercentage).find_last_of('(');
                    if (openParens != std::string_view::npos && openParens != 0) {
                        m.desc = HyoutaUtils::TextUtils::ReplaceSubstring(
                            m.desc, openParens - 1, (firstPercentage - openParens) + 3 + drop, "/");
                        e.Data = m.ToBinary();
                    }
                }
            }
        }

        // Split cases like "Impede (100%) Burn (20%)" to "Impede (100%) - Burn (20%)" like Reverie
        for (int idx : {69,  75,  82,  86,  92,  96,  139, 143, 157, 163, 196, 202,
                        207, 210, 215, 222, 249, 256, 297, 330, 331, 438, 439, 440}) {
            auto& e = tbl_en.Entries[static_cast<size_t>(idx)];
            MagicData m(e.Data.data(), e.Data.size());
            auto firstPercentage = m.desc.find("%)");
            if (firstPercentage != std::string::npos) {
                auto next = std::string_view(m.desc).substr(firstPercentage + 2);
                size_t drop = 0;
                if (next.starts_with("#0C #11C")) {
                    drop = 8;
                } else if (next.starts_with(" ")) {
                    drop = 1;
                }
                if (drop > 0) {
                    m.desc = HyoutaUtils::TextUtils::ReplaceSubstring(
                        m.desc, firstPercentage + 2, drop, "#0C - #11C");
                    e.Data = m.ToBinary();
                }
            }
        }

        // Add a space for things like "Delay+10" -> "Delay +10"
        for (size_t i = 0; i < tbl_en.Entries.size(); ++i) {
            auto& e = tbl_en.Entries[i];
            if (e.Name == "magic") {
                MagicData m(e.Data.data(), e.Data.size());
                if (m.flags.find('Z') != std::string::npos) {
                    auto endpos = m.desc.find("]");
                    if (endpos != std::string::npos && endpos > 0) {
                        bool modified = false;
                        while (true) {
                            auto desc = std::string_view(m.desc).substr(0, endpos);
                            endpos = desc.find_last_of('+');
                            if (endpos == std::string::npos || endpos == 0) {
                                break;
                            }

                            const char c = m.desc[endpos - 1];
                            if (c >= 'a' && c <= 'z') {
                                m.desc = HyoutaUtils::TextUtils::Insert(m.desc, endpos, " ");
                                modified = true;
                            }
                        }
                        if (modified) {
                            e.Data = m.ToBinary();
                        }
                    }
                }
            }
        }

        // Reverie has all the turn counts as "for X turns" instead of as "(X turns)" which is IMO a
        // lot more readable, especially in contexts like "SPD Up (L) (4 turns)". So transform that
        // here.
        for (size_t i = 0; i < tbl_en.Entries.size(); ++i) {
            auto& e = tbl_en.Entries[i];
            if (e.Name == "magic") {
                MagicData m(e.Data.data(), e.Data.size());
                if (m.flags.find('Z') != std::string::npos) {
                    auto endpos = m.desc.find("]");
                    if (endpos != std::string::npos && endpos > 0) {
                        bool modified = false;
                        while (true) {
                            auto nextCloseParens = m.desc.find_last_of(')', endpos);
                            if (nextCloseParens == std::string::npos) {
                                break;
                            }
                            auto nextOpenParens = m.desc.find_last_of('(', nextCloseParens);
                            if (nextOpenParens == std::string::npos) {
                                break;
                            }

                            auto parensContent = std::string_view(m.desc).substr(
                                nextOpenParens + 1, nextCloseParens - (nextOpenParens + 1));
                            if (!parensContent.empty() && parensContent[0] >= '0'
                                && parensContent[0] <= '9'
                                && (parensContent.ends_with("turn")
                                    || parensContent.ends_with("turns"))) {
                                std::string f = "for ";
                                f += parensContent;
                                m.desc = HyoutaUtils::TextUtils::ReplaceSubstring(
                                    m.desc,
                                    nextOpenParens,
                                    (nextCloseParens + 1) - nextOpenParens,
                                    f);
                                modified = true;
                            }

                            endpos = nextOpenParens;
                        }
                        if (modified) {
                            e.Data = m.ToBinary();
                        }
                    }
                }
            }
        }

        // normalize newlines
        for (size_t i = 0; i < tbl_en.Entries.size(); ++i) {
            auto& e = tbl_en.Entries[i];
            if (e.Name == "magic") {
                MagicData m(e.Data.data(), e.Data.size());
                if (AdjustSpacingForBracketed(m.desc)) {
                    e.Data = m.ToBinary();
                }
            }
        }

        // =============== magic done, item next ===============

        // Tasty Potato Chowder
        {
            auto& e = tbl_item_en.Entries[1468];
            ItemData m(e.Data.data(), e.Data.size());
            m.desc = HyoutaUtils::TextUtils::ReplaceSubstring(
                m.desc, 39, 2, "15", 0, 2); // 2000 HP -> 1500 HP
            e.Data = m.ToBinary();
        }

        // Seraph
        {
            auto& e = tbl_item_en.Entries[1211];
            ItemQData m(e.Data.data(), e.Data.size());
            // inconsistent formatting
            m.item.desc = HyoutaUtils::TextUtils::Remove(m.item.desc, 61, 1);
            m.item.desc = HyoutaUtils::TextUtils::ReplaceSubstring(m.item.desc, 112, 2, "/", 0, 1);
            m.item.desc = HyoutaUtils::TextUtils::Remove(m.item.desc, 127, 1);
            e.Data = m.ToBinary();
        }

        // Luck
        {
            auto& e = tbl_item_en.Entries[1198];
            ItemQData m(e.Data.data(), e.Data.size());
            // inconsistent formatting
            m.item.desc = HyoutaUtils::TextUtils::Remove(m.item.desc, 59, 1);
            e.Data = m.ToBinary();
        }

        // Bluster
        {
            auto& e = tbl_item_en.Entries[1118];
            ItemQData m(e.Data.data(), e.Data.size());
            m.item.desc =
                HyoutaUtils::TextUtils::Remove(m.item.desc, 97, 1); // 1 more turns -> 1 more turn
            e.Data = m.ToBinary();
        }

        // Aeolus Gem
        {
            auto& e = tbl_item_en.Entries[1134];
            ItemQData m(e.Data.data(), e.Data.size());
            m.item.desc =
                HyoutaUtils::TextUtils::Remove(m.item.desc, 125, 1); // 1 more turns -> 1 more turn
            e.Data = m.ToBinary();
        }

        // Iron Winged Lion Medal
        {
            auto& e = tbl_item_en.Entries[677];
            ItemData m(e.Data.data(), e.Data.size());
            m.desc = HyoutaUtils::TextUtils::Insert(m.desc, 25, " "); // missing space before parens
            e.Data = m.ToBinary();
        }

        // A few items have "CP +XX", that's inconsistent as usually that space isn't there.
        for (int idx : {1514, 1523, 1529}) {
            auto& e = tbl_item_en.Entries[static_cast<size_t>(idx)];
            if (e.Name == "item") {
                ItemData m(e.Data.data(), e.Data.size());
                auto& line = m.desc;
                auto cp = line.find("CP +");
                if (cp != std::string::npos) {
                    line = HyoutaUtils::TextUtils::Remove(line, cp + 2, 1);
                    e.Data = m.ToBinary();
                }
            }
        }

        // Practically every stat up effect in cooking item descriptions has extra spaces around the
        // up arrow, fix that.
        for (size_t i = 1444; i < 1540; ++i) {
            auto& e = tbl_item_en.Entries[i];
            if (e.Name == "item") {
                ItemData m(e.Data.data(), e.Data.size());
                auto& line = m.desc;
                auto up = line.find("\xE2\x86\x91");
                if (up != std::string::npos) {
                    size_t right = up + 2;
                    while (right < (line.size() - 1) && line[right + 1] == ' ') {
                        ++right;
                    }
                    if (right != (up + 2)) {
                        line = HyoutaUtils::TextUtils::Remove(line, up + 3, right - (up + 2));
                    }
                    size_t left = up;
                    while (left > 0 && line[left - 1] == ' ') {
                        --left;
                    }
                    if (left != up) {
                        line = HyoutaUtils::TextUtils::Remove(line, left, up - left);
                    }
                    e.Data = m.ToBinary();
                }
            }
        }

        // Split effects here because "Restores X HP/CP+Y (Z turns)" is really unclear (it recovers
        // HP immediately and then you have a gradual CP recovery)...
        for (int idx : {1514, 1523, 1529}) {
            auto& e = tbl_item_en.Entries[static_cast<size_t>(idx)];
            if (e.Name == "item") {
                ItemData m(e.Data.data(), e.Data.size());
                auto slash = m.desc.find('/');
                if (slash != std::string::npos) {
                    m.desc =
                        HyoutaUtils::TextUtils::ReplaceSubstring(m.desc, slash, 1, "#0C - #11C");
                    e.Data = m.ToBinary();
                }
            }
        }

        // 'Hit The Snooze' Curry: "Sleep (30%)/Nightmare (30%)" -> "Sleep/Nightmare (30%)"
        {
            auto& e = tbl_item_en.Entries[1507];
            ItemData m(e.Data.data(), e.Data.size());
            m.desc = HyoutaUtils::TextUtils::Remove(m.desc, 88, 6);
            e.Data = m.ToBinary();
        }

        // Abyssal Demon Mapo: "K.O. (30%)/Nightmare (30%)" -> "K.O./Nightmare (30%)"
        {
            auto& e = tbl_item_en.Entries[1512];
            ItemData m(e.Data.data(), e.Data.size());
            m.desc = HyoutaUtils::TextUtils::Remove(m.desc, 87, 6);
            e.Data = m.ToBinary();
        }

        // Zeram Powder, Zeram Capsule: Weird order of effects, lists KO cure before CP recovery
        // when usually HP/EP/CP are all at the start. Swap that around.
        for (int idx : {11, 12}) {
            auto& e = tbl_item_en.Entries[static_cast<size_t>(idx)];
            ItemData m(e.Data.data(), e.Data.size());
            m.desc = HyoutaUtils::TextUtils::MoveSubstring(m.desc, 45, 72, 11);
            e.Data = m.ToBinary();
        }

        // Item descriptions readability pass. Some of eg. the cooking
        // descriptions are really non-obvious to parse, stuff like
        // "Restores 2000 HP/200 EP/STR/DEF UP (L) (2 turns)"
        // is just a mess. Compare Reverie, those are *much* more readable.
        // TODO: Equipment could use this too, but a lot of those are autogenerated...
        struct SlashToDash {
            uint16_t Item;
            std::array<uint8_t, 6> Dashes;

            constexpr SlashToDash(uint16_t item,
                                  uint8_t d0,
                                  uint8_t d1 = 0,
                                  uint8_t d2 = 0,
                                  uint8_t d3 = 0,
                                  uint8_t d4 = 0,
                                  uint8_t d5 = 0)
              : Item(item), Dashes{{d0, d1, d2, d3, d4, d5}} {}
        };
        // for (size_t i = 0; i < tbl_item_en.Entries.size(); ++i) {
        //     auto& e = tbl_item_en.Entries[i];
        //     auto a = [&](std::string_view name, std::string_view desc) {
        //         if (desc.find('/') != std::string_view::npos) {
        //             std::string s = "SlashToDash(";
        //             s += std::to_string(i);
        //             size_t j = 1;
        //             while (desc.find('/') != std::string_view::npos) {
        //                 s += ", ";
        //                 s += std::to_string(j);
        //                 ++j;
        //                 desc = desc.substr(desc.find('/') + 1);
        //             }
        //             s += "), // ";
        //             s += name;
        //             printf("%s\n", s.c_str());
        //         }
        //     };
        //     if (e.Name == "item_q") {
        //         ItemQData m(e.Data.data(), e.Data.size());
        //         a(m.item.name, m.item.desc);
        //     } else if (e.Name == "item") {
        //         ItemData m(e.Data.data(), e.Data.size());
        //         a(m.name, m.desc);
        //     }
        // }
        static constexpr std::array slashArray = {
            SlashToDash(8, 1),       // Reviving Balm
            SlashToDash(9, 1),       // Celestial Balm
            SlashToDash(10, 1),      // Celestial Balm EX
            SlashToDash(11, 2),      // Zeram Powder
            SlashToDash(12, 2),      // Zeram Capsule
            SlashToDash(15, 2),      // Spirit Incense
            SlashToDash(16, 2),      // Dragon Incense
            SlashToDash(38, 1),      // Repair Stone
            SlashToDash(41, 1),      // Resurrect Stone
            SlashToDash(42, 4),      // Primordial Flame
            SlashToDash(43, 2, 3),   // Power Potion
            SlashToDash(44, 3, 4),   // Shield Potion
            SlashToDash(45, 2, 3),   // Mind Potion
            SlashToDash(46, 2, 3),   // Power Potion II
            SlashToDash(47, 3, 4),   // Shield Potion II
            SlashToDash(48, 2, 3),   // Mind Potion II
            SlashToDash(49, 1),      // Strawberry Pecky
            SlashToDash(50, 1),      // Butter Pecky
            SlashToDash(51, 1),      // Grape Pecky
            SlashToDash(52, 1),      // Consomme Pecky
            SlashToDash(53, 1),      // Salad Pecky
            SlashToDash(54, 1),      // Carrot Pecky
            SlashToDash(55, 1),      // Fortune Pecky
            SlashToDash(56, 1),      // Mishy Pecky
            SlashToDash(57, 1),      // Holy Pecky
            SlashToDash(58, 1),      // Cinnamon Pecky
            SlashToDash(59, 1),      // Oregano Pecky
            SlashToDash(60, 1),      // Brown Sugar Pecky
            SlashToDash(65, 1),      // Classic Tea
            SlashToDash(66, 1),      // Blended Coffee
            SlashToDash(67, 1),      // White Smoothie
            SlashToDash(68, 1),      // Fresh Grape Juice
            SlashToDash(69, 1),      // Hermit Blue
            SlashToDash(70, 1),      // Crunchy Melon Bun
            SlashToDash(71, 1),      // Souffle Pancakes
            SlashToDash(72, 1),      // Mishy Ice Cream
            SlashToDash(73, 1),      // Mishette Grill
            SlashToDash(74, 1),      // Rockeater Salt Grill
            SlashToDash(75, 1),      // Bellberry Ice Cream
            SlashToDash(76, 1),      // White Petite Croquette
            SlashToDash(77, 1),      // Decken's Rib
            SlashToDash(78, 1),      // Alster Risotto
            SlashToDash(79, 1),      // Miranda's Paella
            SlashToDash(80, 1),      // Bartolo's Special
            SlashToDash(81, 1),      // Vingt-Sept Hamburg Steak
            SlashToDash(82, 1),      // Dragon Fried Rice
            SlashToDash(83, 1),      // Aged Fillet Steak
            SlashToDash(84, 1),      // Fragrant Chicken Pie
            SlashToDash(85, 1),      // Slightly Sweet Walnut Pie
            SlashToDash(86, 1),      // Ultimate Chiffon Delight
            SlashToDash(87, 1),      // Mandrake Soup
            SlashToDash(88, 1),      // Ruby Omelet
            SlashToDash(89, 1),      // Paradise Pie
            SlashToDash(90, 1),      // Ancient Steak
            SlashToDash(1444, 2),    // Luminary Soup
            SlashToDash(1445, 1),    // Rainbow Mille Crepe
            SlashToDash(1446, 1),    // Golden Doria
            SlashToDash(1447, 1),    // Giga Spaghetti Bolognese
            SlashToDash(1448, 1),    // Artisan Special Pie
            SlashToDash(1449, 2),    // Ripe Tomato Pizza
            SlashToDash(1450, 1),    // Deluxe Miso Noodles
            SlashToDash(1451, 1),    // Noctilucent Butterfly Water
            SlashToDash(1452, 1),    // Royal Hashed Rice
            SlashToDash(1453, 2),    // Grandma's Cheeky Tart
            SlashToDash(1454, 1),    // Noble Risotto
            SlashToDash(1455, 1),    // Neptune Bouillabaisse
            SlashToDash(1456, 2),    // Parfait du Tomatonio
            SlashToDash(1457, 1),    // Extravagant Sauerkraut
            SlashToDash(1458, 2),    // Rich Berry Shake
            SlashToDash(1459, 1, 2), // Supreme Curry
            SlashToDash(1461, 1),    // Esmelas Salad
            SlashToDash(1462, 2),    // Power Grill
            SlashToDash(1463, 1),    // Edel Gratin
            SlashToDash(1464, 2),    // Paradise Mapo Tofu
            SlashToDash(1465, 2),    // Golden Drop
            SlashToDash(1466, 1),    // King Lobster Sandwich
            SlashToDash(1467, 1),    // Gorgeous Special Plate
            SlashToDash(1468, 1),    // Tasty Potato Chowder
            SlashToDash(1469, 1),    // Delicate Millefeuille
            SlashToDash(1470, 1),    // Luxurious Cheese Doria
            SlashToDash(1471, 1),    // Spaghetti Bolognese
            SlashToDash(1472, 1),    // Delicious Fish Pie
            SlashToDash(1473, 2),    // Acerbic Tomato Pizza
            SlashToDash(1474, 1),    // Ozelle Miso Noodles
            SlashToDash(1475, 1),    // Midnight Cola
            SlashToDash(1476, 1),    // XL Hashed Rice
            SlashToDash(1477, 2),    // Starberry Tart
            SlashToDash(1478, 1),    // Creamy Risotto
            SlashToDash(1479, 1),    // Sea Breeze Bouillabaisse
            SlashToDash(1480, 2),    // Bittersweet Tomato Gelato
            SlashToDash(1481, 1),    // Crispy Pickles
            SlashToDash(1482, 2),    // Refreshing Berry Shake
            SlashToDash(1483, 1, 2), // Delicious Cheese Curry
            SlashToDash(1485, 1),    // Yummy Caesar Salad
            SlashToDash(1486, 2),    // Wild Grill
            SlashToDash(1487, 1),    // Cheesy Penne Gratin
            SlashToDash(1488, 2),    // Addictive Mapo Tofu
            SlashToDash(1489, 2),    // Imperial Tea
            SlashToDash(1490, 1),    // Shrimp Cutlet Sandwich
            SlashToDash(1491, 1),    // Filling Thors Lunch
            SlashToDash(1493, 1),    // Shield Cake
            SlashToDash(1495, 1),    // Sword Pasta
            SlashToDash(1497, 2),    // Extremely Bitter Pizza
            SlashToDash(1499, 1),    // Pitch Black Syrup
            SlashToDash(1501, 2),    // Magic Tart
            SlashToDash(1502, 1),    // Pale Plight Rice
            SlashToDash(1504, 2),    // Scary Sorbet
            SlashToDash(1506, 2),    // Dark Red Sludge
            SlashToDash(1509, 1),    // Encouragement Salad
            SlashToDash(1511, 1),    // Scorched Gratin
            SlashToDash(1513, 1),    // Gilded Liquid
            SlashToDash(1515, 1),    // Dieter's Lunch
            SlashToDash(1516, 2),    // Northern Borscht
            SlashToDash(1517, 1),    // Rabbit Stollen
            SlashToDash(1518, 1),    // Wild Octopus Rice
            SlashToDash(1519, 1),    // Hearty Bolognese Sandwich
            SlashToDash(1520, 3),    // Quintet Pie
            SlashToDash(1521, 2),    // Zephyr Basil Pizza
            SlashToDash(1522, 1),    // Heavenly Salted Noodles
            SlashToDash(1524, 1),    // Select Beef Stroganoff
            SlashToDash(1525, 2),    // Lovely Lavender Macaron
            SlashToDash(1526, 2),    // Medicinal Blend Rice
            SlashToDash(1527, 1),    // Wholehearted Stew
            SlashToDash(1528, 2),    // Power Tomato Shake
            SlashToDash(1530, 2),    // Meine Liebe Kiss
            SlashToDash(1531, 1, 2), // Jade Bistro Curry
            SlashToDash(1532, 2),    // Fairy Tale Plate
            SlashToDash(1533, 2),    // Zeiss Power Salad
            SlashToDash(1534, 2),    // Picnic Rainbow Grill
            SlashToDash(1535, 1),    // Amor Omelet Gratin
            SlashToDash(1536, 2),    // Phoenix Flame Mapo
            SlashToDash(1537, 3),    // Arnor Kuchen
            SlashToDash(1538, 1),    // Underside Fish Burger
            SlashToDash(1539, 1),    // Course du Royale
        };
        for (const auto& slashData : slashArray) {
            auto& e = tbl_item_en.Entries[slashData.Item];
            auto apply = [&](std::string& desc) {
                size_t i = 0;
                size_t slashNum = 0;
                size_t arrayIdx = 0;
                while (i < desc.size()) {
                    if (desc[i] == '/') {
                        ++slashNum;
                        if (slashData.Dashes[arrayIdx] == slashNum) {
                            desc =
                                HyoutaUtils::TextUtils::ReplaceSubstring(desc, i, 1, "#0C - #11C");
                            i += 10;
                            ++arrayIdx;
                            if (arrayIdx >= slashData.Dashes.size()
                                || slashData.Dashes[arrayIdx] == 0) {
                                break;
                            }
                        } else {
                            ++i;
                        }
                    } else {
                        ++i;
                    }
                }
            };
            if (e.Name == "item_q") {
                ItemQData m(e.Data.data(), e.Data.size());
                apply(m.item.desc);
                e.Data = m.ToBinary();
            } else if (e.Name == "item") {
                ItemData m(e.Data.data(), e.Data.size());
                apply(m.desc);
                e.Data = m.ToBinary();
            }
        }


        // sync the magic descriptions onto the base quartzes that give that magic
        struct ItemMagicSync {
            uint16_t Item;
            uint16_t Magic;
        };
        // for (size_t i = 0; i < tbl_item_en.Entries.size(); ++i) {
        //     auto& e = tbl_item_en.Entries[i];
        //     if (e.Name == "item_q") {
        //         ItemQData m(e.Data.data(), e.Data.size());
        //         if (m.arts[0] != 0xffffu && m.arts[1] == 0xffffu && m.arts[2] == 0xffffu
        //             && m.arts[3] == 0xffffu && m.arts[4] == 0xffffu && m.arts[5] == 0xffffu) {
        //             for (size_t j = 0; j < tbl_en.Entries.size(); ++j) {
        //                 auto& e2 = tbl_en.Entries[j];
        //                 if (e2.Name == "magic") {
        //                     MagicData m2(e2.Data.data(), e2.Data.size());
        //                     if (m2.idx == m.arts[0]) {
        //                         printf("ItemMagicSync{.Item = %zu, .Magic = %zu}, // %s / %s\n",
        //                                i,
        //                                j,
        //                                m.item.name.c_str(),
        //                                m2.name.c_str());
        //                         break;
        //                     }
        //                 }
        //             }
        //         }
        //     }
        // }
        static constexpr std::array syncArray = {
            ItemMagicSync{.Item = 942, .Magic = 13},  // Needle Shoot / Needle Shoot
            ItemMagicSync{.Item = 943, .Magic = 14},  // Ivy Nail / Ivy Nail
            ItemMagicSync{.Item = 944, .Magic = 15},  // Megalith Fall / Megalith Fall
            ItemMagicSync{.Item = 945, .Magic = 16},  // Gravion Hammer / Gravion Hammer
            ItemMagicSync{.Item = 946, .Magic = 18},  // Crest / Crest
            ItemMagicSync{.Item = 947, .Magic = 19},  // La Crest / La Crest
            ItemMagicSync{.Item = 948, .Magic = 17},  // Earth Pulse / Earth Pulse
            ItemMagicSync{.Item = 949, .Magic = 20},  // Adamantine Shield / Adamantine Shield
            ItemMagicSync{.Item = 955, .Magic = 13},  // Needle Shoot R / Needle Shoot
            ItemMagicSync{.Item = 956, .Magic = 14},  // Ivy Nail R / Ivy Nail
            ItemMagicSync{.Item = 957, .Magic = 15},  // Megalith Fall R / Megalith Fall
            ItemMagicSync{.Item = 958, .Magic = 16},  // Gravion Hammer R / Gravion Hammer
            ItemMagicSync{.Item = 959, .Magic = 18},  // Crest R / Crest
            ItemMagicSync{.Item = 960, .Magic = 19},  // La Crest R / La Crest
            ItemMagicSync{.Item = 961, .Magic = 17},  // Earth Pulse R / Earth Pulse
            ItemMagicSync{.Item = 962, .Magic = 20},  // Adamantine Shield R / Adamantine Shield
            ItemMagicSync{.Item = 971, .Magic = 13},  // Needle Shoot SR / Needle Shoot
            ItemMagicSync{.Item = 972, .Magic = 14},  // Ivy Nail SR / Ivy Nail
            ItemMagicSync{.Item = 973, .Magic = 15},  // Megalith Fall SR / Megalith Fall
            ItemMagicSync{.Item = 974, .Magic = 16},  // Gravion Hammer SR / Gravion Hammer
            ItemMagicSync{.Item = 975, .Magic = 18},  // Crest SR / Crest
            ItemMagicSync{.Item = 976, .Magic = 19},  // La Crest SR / La Crest
            ItemMagicSync{.Item = 977, .Magic = 17},  // Earth Pulse SR / Earth Pulse
            ItemMagicSync{.Item = 978, .Magic = 20},  // Adamantine Shield SR / Adamantine Shield
            ItemMagicSync{.Item = 990, .Magic = 21},  // Aqua Bleed / Aqua Bleed
            ItemMagicSync{.Item = 991, .Magic = 22},  // Crystal Edge / Crystal Edge
            ItemMagicSync{.Item = 992, .Magic = 23},  // Blue Ascension / Blue Ascension
            ItemMagicSync{.Item = 993, .Magic = 24},  // Diamond Nova / Diamond Nova
            ItemMagicSync{.Item = 994, .Magic = 25},  // Tear / Tear
            ItemMagicSync{.Item = 995, .Magic = 26},  // Teara / Teara
            ItemMagicSync{.Item = 996, .Magic = 27},  // Tearal / Tearal
            ItemMagicSync{.Item = 997, .Magic = 28},  // Curia / Curia
            ItemMagicSync{.Item = 998, .Magic = 29},  // Thelas / Thelas
            ItemMagicSync{.Item = 999, .Magic = 30},  // Athelas / Athelas
            ItemMagicSync{.Item = 1005, .Magic = 21}, // Aqua Bleed R / Aqua Bleed
            ItemMagicSync{.Item = 1006, .Magic = 22}, // Crystal Edge R / Crystal Edge
            ItemMagicSync{.Item = 1007, .Magic = 23}, // Blue Ascension R / Blue Ascension
            ItemMagicSync{.Item = 1008, .Magic = 24}, // Diamond Nova R / Diamond Nova
            ItemMagicSync{.Item = 1009, .Magic = 25}, // Tear R / Tear
            ItemMagicSync{.Item = 1010, .Magic = 26}, // Teara R / Teara
            ItemMagicSync{.Item = 1011, .Magic = 27}, // Tearal R / Tearal
            ItemMagicSync{.Item = 1012, .Magic = 28}, // Curia R / Curia
            ItemMagicSync{.Item = 1013, .Magic = 29}, // Thelas R / Thelas
            ItemMagicSync{.Item = 1014, .Magic = 30}, // Athelas R / Athelas
            ItemMagicSync{.Item = 1023, .Magic = 21}, // Aqua Bleed SR / Aqua Bleed
            ItemMagicSync{.Item = 1024, .Magic = 22}, // Crystal Edge SR / Crystal Edge
            ItemMagicSync{.Item = 1025, .Magic = 23}, // Blue Ascension SR / Blue Ascension
            ItemMagicSync{.Item = 1026, .Magic = 24}, // Diamond Nova SR / Diamond Nova
            ItemMagicSync{.Item = 1027, .Magic = 25}, // Tear SR / Tear
            ItemMagicSync{.Item = 1028, .Magic = 26}, // Teara SR / Teara
            ItemMagicSync{.Item = 1029, .Magic = 27}, // Tearal SR / Tearal
            ItemMagicSync{.Item = 1030, .Magic = 28}, // Curia SR / Curia
            ItemMagicSync{.Item = 1031, .Magic = 29}, // Thelas SR / Thelas
            ItemMagicSync{.Item = 1032, .Magic = 30}, // Athelas SR / Athelas
            ItemMagicSync{.Item = 1044, .Magic = 31}, // Fire Bolt / Fire Bolt
            ItemMagicSync{.Item = 1045, .Magic = 32}, // Venom Flame / Venom Flame
            ItemMagicSync{.Item = 1046, .Magic = 33}, // Flare Butterfly / Flare Butterfly
            ItemMagicSync{.Item = 1047, .Magic = 34}, // Zeruel Cannon / Zeruel Cannon
            ItemMagicSync{.Item = 1048, .Magic = 36}, // Forte / Forte
            ItemMagicSync{.Item = 1049, .Magic = 37}, // La Forte / La Forte
            ItemMagicSync{.Item = 1050, .Magic = 38}, // Heat Up / Heat Up
            ItemMagicSync{.Item = 1051, .Magic = 35}, // Impassion / Impassion
            ItemMagicSync{.Item = 1057, .Magic = 31}, // Fire Bolt R / Fire Bolt
            ItemMagicSync{.Item = 1058, .Magic = 32}, // Venom Flame R / Venom Flame
            ItemMagicSync{.Item = 1059, .Magic = 33}, // Flare Butterfly R / Flare Butterfly
            ItemMagicSync{.Item = 1060, .Magic = 34}, // Zeruel Cannon R / Zeruel Cannon
            ItemMagicSync{.Item = 1061, .Magic = 36}, // Forte R / Forte
            ItemMagicSync{.Item = 1062, .Magic = 37}, // La Forte R / La Forte
            ItemMagicSync{.Item = 1063, .Magic = 38}, // Heat Up R / Heat Up
            ItemMagicSync{.Item = 1064, .Magic = 35}, // Impassion R / Impassion
            ItemMagicSync{.Item = 1073, .Magic = 31}, // Fire Bolt SR / Fire Bolt
            ItemMagicSync{.Item = 1074, .Magic = 32}, // Venom Flame SR / Venom Flame
            ItemMagicSync{.Item = 1075, .Magic = 33}, // Flare Butterfly SR / Flare Butterfly
            ItemMagicSync{.Item = 1076, .Magic = 34}, // Zeruel Cannon SR / Zeruel Cannon
            ItemMagicSync{.Item = 1077, .Magic = 36}, // Forte SR / Forte
            ItemMagicSync{.Item = 1078, .Magic = 37}, // La Forte SR / La Forte
            ItemMagicSync{.Item = 1079, .Magic = 38}, // Heat Up SR / Heat Up
            ItemMagicSync{.Item = 1080, .Magic = 35}, // Impassion SR / Impassion
            ItemMagicSync{.Item = 1092, .Magic = 39}, // Air Strike / Air Strike
            ItemMagicSync{.Item = 1093, .Magic = 40}, // Nemesis Arrow / Nemesis Arrow
            ItemMagicSync{.Item = 1094, .Magic = 41}, // Aerial Dust / Aerial Dust
            ItemMagicSync{.Item = 1095, .Magic = 42}, // Ixion Volt / Ixion Volt
            ItemMagicSync{.Item = 1096, .Magic = 43}, // Breath / Breath
            ItemMagicSync{.Item = 1097, .Magic = 44}, // Holy Breath / Holy Breath
            ItemMagicSync{.Item = 1098, .Magic = 45}, // Recuria / Recuria
            ItemMagicSync{.Item = 1104, .Magic = 39}, // Air Strike R / Air Strike
            ItemMagicSync{.Item = 1105, .Magic = 40}, // Nemesis Arrow R / Nemesis Arrow
            ItemMagicSync{.Item = 1106, .Magic = 41}, // Aerial Dust R / Aerial Dust
            ItemMagicSync{.Item = 1107, .Magic = 42}, // Ixion Volt R / Ixion Volt
            ItemMagicSync{.Item = 1108, .Magic = 43}, // Breath R / Breath
            ItemMagicSync{.Item = 1109, .Magic = 44}, // Holy Breath R / Holy Breath
            ItemMagicSync{.Item = 1110, .Magic = 45}, // Recuria R / Recuria
            ItemMagicSync{.Item = 1119, .Magic = 39}, // Air Strike SR / Air Strike
            ItemMagicSync{.Item = 1120, .Magic = 40}, // Nemesis Arrow SR / Nemesis Arrow
            ItemMagicSync{.Item = 1121, .Magic = 41}, // Aerial Dust SR / Aerial Dust
            ItemMagicSync{.Item = 1122, .Magic = 42}, // Ixion Volt SR / Ixion Volt
            ItemMagicSync{.Item = 1123, .Magic = 43}, // Breath SR / Breath
            ItemMagicSync{.Item = 1124, .Magic = 44}, // Holy Breath SR / Holy Breath
            ItemMagicSync{.Item = 1125, .Magic = 45}, // Recuria SR / Recuria
            ItemMagicSync{.Item = 1137, .Magic = 46}, // Soul Blur / Soul Blur
            ItemMagicSync{.Item = 1138, .Magic = 47}, // Calvary Edge / Calvary Edge
            ItemMagicSync{.Item = 1139, .Magic = 48}, // Lost Genesis / Lost Genesis
            ItemMagicSync{.Item = 1140, .Magic = 49}, // Chrono Drive / Chrono Drive
            ItemMagicSync{.Item = 1141, .Magic = 50}, // Chrono Break / Chrono Break
            ItemMagicSync{.Item = 1142, .Magic = 51}, // Chrono Burst / Chrono Burst
            ItemMagicSync{.Item = 1147, .Magic = 46}, // Soul Blur R / Soul Blur
            ItemMagicSync{.Item = 1148, .Magic = 47}, // Calvary Edge R / Calvary Edge
            ItemMagicSync{.Item = 1149, .Magic = 48}, // Lost Genesis R / Lost Genesis
            ItemMagicSync{.Item = 1150, .Magic = 49}, // Chrono Drive R / Chrono Drive
            ItemMagicSync{.Item = 1151, .Magic = 50}, // Chrono Break R / Chrono Break
            ItemMagicSync{.Item = 1152, .Magic = 51}, // Chrono Burst R / Chrono Burst
            ItemMagicSync{.Item = 1160, .Magic = 46}, // Soul Blur SR / Soul Blur
            ItemMagicSync{.Item = 1161, .Magic = 47}, // Calvary Edge SR / Calvary Edge
            ItemMagicSync{.Item = 1162, .Magic = 48}, // Lost Genesis SR / Lost Genesis
            ItemMagicSync{.Item = 1163, .Magic = 49}, // Chrono Drive SR / Chrono Drive
            ItemMagicSync{.Item = 1164, .Magic = 50}, // Chrono Break SR / Chrono Break
            ItemMagicSync{.Item = 1165, .Magic = 51}, // Chrono Burst SR / Chrono Burst
            ItemMagicSync{.Item = 1176, .Magic = 52}, // Golden Sphere / Golden Sphere
            ItemMagicSync{.Item = 1177, .Magic = 53}, // Cross Crusade / Cross Crusade
            ItemMagicSync{.Item = 1178, .Magic = 54}, // Seventh Caliber / Seventh Caliber
            ItemMagicSync{.Item = 1179, .Magic = 55}, // Fortuna / Fortuna
            ItemMagicSync{.Item = 1180, .Magic = 56}, // Shining / Shining
            ItemMagicSync{.Item = 1181, .Magic = 57}, // Seraphic Ring / Seraphic Ring
            ItemMagicSync{.Item = 1186, .Magic = 52}, // Golden Sphere R / Golden Sphere
            ItemMagicSync{.Item = 1187, .Magic = 53}, // Cross Crusade R / Cross Crusade
            ItemMagicSync{.Item = 1188, .Magic = 54}, // Seventh Caliber R / Seventh Caliber
            ItemMagicSync{.Item = 1189, .Magic = 55}, // Fortuna R / Fortuna
            ItemMagicSync{.Item = 1190, .Magic = 56}, // Shining R / Shining
            ItemMagicSync{.Item = 1191, .Magic = 57}, // Seraphic Ring R / Seraphic Ring
            ItemMagicSync{.Item = 1199, .Magic = 52}, // Golden Sphere SR / Golden Sphere
            ItemMagicSync{.Item = 1200, .Magic = 53}, // Cross Crusade SR / Cross Crusade
            ItemMagicSync{.Item = 1201, .Magic = 54}, // Seventh Caliber SR / Seventh Caliber
            ItemMagicSync{.Item = 1202, .Magic = 55}, // Fortuna SR / Fortuna
            ItemMagicSync{.Item = 1203, .Magic = 56}, // Shining SR / Shining
            ItemMagicSync{.Item = 1204, .Magic = 57}, // Seraphic Ring SR / Seraphic Ring
            ItemMagicSync{.Item = 1216, .Magic = 58}, // Silver Thorn / Silver Thorn
            ItemMagicSync{.Item = 1217, .Magic = 59}, // Galion Fort / Galion Fort
            ItemMagicSync{.Item = 1218, .Magic = 60}, // Albion Wolf / Albion Wolf
            ItemMagicSync{.Item = 1219, .Magic = 61}, // Analyze / Analyze
            ItemMagicSync{.Item = 1220, .Magic = 62}, // Saintly Force / Saintly Force
            ItemMagicSync{.Item = 1221, .Magic = 63}, // Crescent Mirror / Crescent Mirror
            ItemMagicSync{.Item = 1226, .Magic = 58}, // Silver Thorn R / Silver Thorn
            ItemMagicSync{.Item = 1227, .Magic = 59}, // Galion Fort R / Galion Fort
            ItemMagicSync{.Item = 1228, .Magic = 60}, // Albion Wolf R / Albion Wolf
            ItemMagicSync{.Item = 1229, .Magic = 61}, // Analyze R / Analyze
            ItemMagicSync{.Item = 1230, .Magic = 62}, // Saintly Force R / Saintly Force
            ItemMagicSync{.Item = 1231, .Magic = 63}, // Crescent Mirror R / Crescent Mirror
            ItemMagicSync{.Item = 1240, .Magic = 58}, // Silver Thorn SR / Silver Thorn
            ItemMagicSync{.Item = 1241, .Magic = 59}, // Galion Fort SR / Galion Fort
            ItemMagicSync{.Item = 1242, .Magic = 60}, // Albion Wolf SR / Albion Wolf
            ItemMagicSync{.Item = 1243, .Magic = 61}, // Analyze SR / Analyze
            ItemMagicSync{.Item = 1244, .Magic = 62}, // Saintly Force SR / Saintly Force
            ItemMagicSync{.Item = 1245, .Magic = 63}, // Crescent Mirror SR / Crescent Mirror
            ItemMagicSync{.Item = 1257, .Magic = 64}, // Prominence Nova / Prominence Nova
            ItemMagicSync{.Item = 1258, .Magic = 65}, // Leanan's Kiss / Leanan's Kiss
            ItemMagicSync{.Item = 1259, .Magic = 66}, // Grail Thelas / Grail Thelas
            ItemMagicSync{.Item = 1260, .Magic = 67}, // Frozen Epoch / Frozen Epoch
            ItemMagicSync{.Item = 1261, .Magic = 68}, // Aeonian Emperor / Aeonian Emperor
        };
        for (const ItemMagicSync& info : syncArray) {
            auto& e = tbl_en.Entries[info.Magic];
            auto& e2 = tbl_item_en.Entries[info.Item];
            MagicData m(e.Data.data(), e.Data.size());
            ItemQData m2(e2.Data.data(), e2.Data.size());

            std::string desc = m.desc;
            // not sure what designates rarity in CS4 so just use the name...
            if (m2.item.name.ends_with(" R") || m2.item.name.ends_with(" SR")) {
                auto img = desc.find('I');
                if (img == std::string::npos) {
                    continue;
                }
                desc = HyoutaUtils::TextUtils::Insert(
                    desc, img + 1, m2.item.name.ends_with(" R") ? "(R)" : "(SR)");
            }
            if (m2.item.HP != 0 || m2.item.EP != 0 || m2.item.STR != 0 || m2.item.DEF != 0
                || m2.item.ATS != 0 || m2.item.ADF != 0 || m2.item.SPD != 0 || m2.item.MOV != 0
                || m2.item.ACC != 0 || m2.item.EVA != 0) {
                auto newline = desc.find('\n');
                if (newline == std::string::npos) {
                    continue;
                }
                std::array<int32_t, 10> statArray{m2.item.HP,
                                                  m2.item.EP,
                                                  m2.item.STR,
                                                  m2.item.DEF,
                                                  m2.item.ATS,
                                                  m2.item.ADF,
                                                  m2.item.SPD,
                                                  m2.item.MOV,
                                                  m2.item.ACC,
                                                  m2.item.EVA};
                static constexpr std::array<const char*, 10> statNames{
                    "HP", "EP", "STR", "DEF", "ATS", "ADF", "SPD", "MOV", "ACC", "EVA"};

                bool first = true;
                std::string stats = "(";
                // HP+EP may combine
                for (size_t i = 0; i < 2; ++i) {
                    if (statArray[i] != 0) {
                        if (!first) {
                            stats += "/";
                        }
                        stats += statNames[i];
                        // vanilla CS4 doesn't combine here
                        // for (size_t j = i + 1; j < 2; ++j) {
                        //     if (statArray[i] == statArray[j]) {
                        //         stats += "\xEF\xBD\xA5";
                        //         stats += statNames[j];
                        //         statArray[j] = 0;
                        //     }
                        // }
                        stats += "+";
                        stats += std::to_string(statArray[i]);
                        first = false;
                    }
                }
                // STR+DEF+ATS+ADF+SPD+MOV may combine
                for (size_t i = 2; i < 8; ++i) {
                    if (statArray[i] != 0) {
                        if (!first) {
                            stats += "/";
                        }
                        stats += statNames[i];
                        // vanilla CS4 doesn't combine here
                        // for (size_t j = i + 1; j < 8; ++j) {
                        //     if (statArray[i] == statArray[j]) {
                        //         stats += "\xEF\xBD\xA5";
                        //         stats += statNames[j];
                        //         statArray[j] = 0;
                        //     }
                        // }
                        stats += "+";
                        stats += std::to_string(statArray[i]);
                        first = false;
                    }
                }
                for (size_t i = 8; i < 10; ++i) {
                    if (statArray[i] != 0) {
                        if (!first) {
                            stats += "/";
                        }
                        stats += statNames[i];
                        stats += "+";
                        stats += std::to_string(statArray[i]);
                        stats += "%";
                        first = false;
                    }
                }
                stats += ") ";

                // find best place to insert
                size_t insertPos = newline + 1;
                while (insertPos < desc.size()) {
                    if (desc[insertPos] == ' ') {
                        ++insertPos;
                    } else {
                        break;
                    }
                }
                desc = HyoutaUtils::TextUtils::Insert(desc, insertPos, stats);
            }

            m2.item.desc = std::move(desc);
            e2.Data = m2.ToBinary();
        }

        // normalize newlines
        for (size_t i = 0; i < tbl_item_en.Entries.size(); ++i) {
            auto& e = tbl_item_en.Entries[i];
            if (e.Name == "item") {
                ItemData m(e.Data.data(), e.Data.size());
                if (m.category != 0xc5 && AdjustSpacingForBracketed(m.desc)) {
                    e.Data = m.ToBinary();
                }
            } else if (e.Name == "item_q") {
                ItemQData m(e.Data.data(), e.Data.size());
                if (AdjustSpacingForBracketed(m.item.desc)) {
                    e.Data = m.ToBinary();
                }
            }
        }

        // =============== finalize ===============

        // remove Z flag to compare with autogenerated descriptions
        // for (size_t i = 0; i < tbl_en.Entries.size(); ++i) {
        //     auto& e = tbl_en.Entries[i];
        //     if (e.Name == "magic") {
        //         MagicData m(e.Data.data(), e.Data.size());
        //         auto pos = m.flags.find('Z');
        //         if (pos != std::string::npos) {
        //             m.flags.erase(m.flags.begin() + pos);
        //         }
        //         e.Data = m.ToBinary();
        //     }
        // }
        // for (size_t i = 0; i < tbl_item_en.Entries.size(); ++i) {
        //     auto& e = tbl_item_en.Entries[i];
        //     if (e.Name == "item") {
        //         ItemData m(e.Data.data(), e.Data.size());
        //         auto pos = m.flags.find('Z');
        //         if (pos != std::string::npos) {
        //             m.flags.erase(m.flags.begin() + pos);
        //         }
        //         e.Data = m.ToBinary();
        //     } else if (e.Name == "item_q") {
        //         ItemQData m(e.Data.data(), e.Data.size());
        //         auto pos = m.item.flags.find('Z');
        //         if (pos != std::string::npos) {
        //             m.item.flags.erase(m.item.flags.begin() + pos);
        //         }
        //         e.Data = m.ToBinary();
        //     }
        // }

        std::vector<char> result_en_vec;
        std::vector<char> result_item_en_vec;
        {
            HyoutaUtils::Stream::MemoryStream result_en(result_en_vec);
            tbl_en.WriteToStream(result_en, HyoutaUtils::EndianUtils::Endianness::LittleEndian);
        }
        {
            HyoutaUtils::Stream::MemoryStream result_en(result_item_en_vec);
            tbl_item_en.WriteToStream(result_en,
                                      HyoutaUtils::EndianUtils::Endianness::LittleEndian);
        }


        result.emplace_back(
            std::move(result_en_vec), file->Filename, SenPatcher::P3ACompressionType::LZ4);
        result.emplace_back(std::move(result_item_en_vec),
                            file_item_en->Filename,
                            SenPatcher::P3ACompressionType::LZ4);

        return true;
    } catch (...) {
        return false;
    }
}
} // namespace SenLib::Sen4::FileFixes::t_item_magic
