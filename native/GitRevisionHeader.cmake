cmake_minimum_required(VERSION 3.24 FATAL_ERROR)

set(SENPATCHER_VERSION "(unknown version)")

find_package(Git QUIET)
if (GIT_FOUND)
	execute_process(
		COMMAND ${GIT_EXECUTABLE} describe --dirty --tags --always
		WORKING_DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}/.."
		RESULT_VARIABLE TMP_SENPATCHER_GIT_DESCRIBE_RESULT
		OUTPUT_VARIABLE TMP_SENPATCHER_GIT_DESCRIBE_OUTPUT
		OUTPUT_STRIP_TRAILING_WHITESPACE
	)
	execute_process(
		COMMAND ${GIT_EXECUTABLE} rev-parse --abbrev-ref HEAD
		WORKING_DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}/.."
		RESULT_VARIABLE TMP_SENPATCHER_GIT_REVPARSE_RESULT
		OUTPUT_VARIABLE TMP_SENPATCHER_GIT_REVPARSE_OUTPUT
		OUTPUT_STRIP_TRAILING_WHITESPACE
	)
	if (${TMP_SENPATCHER_GIT_DESCRIBE_RESULT} EQUAL 0 AND ${TMP_SENPATCHER_GIT_REVPARSE_RESULT} EQUAL 0)
		if (${TMP_SENPATCHER_GIT_REVPARSE_OUTPUT} STREQUAL "master")
			set(SENPATCHER_VERSION "${TMP_SENPATCHER_GIT_DESCRIBE_OUTPUT}")
		else()
			set(SENPATCHER_VERSION "${TMP_SENPATCHER_GIT_DESCRIBE_OUTPUT} (${TMP_SENPATCHER_GIT_REVPARSE_OUTPUT})")
		endif()
	endif()
endif()

message(STATUS "Revision is ${SENPATCHER_VERSION}")
file(WRITE "${CMAKE_BINARY_DIR}/senpatcher_embeds/senpatcher_version.h.tmp" "#pragma once\n#define SENPATCHER_VERSION \"${SENPATCHER_VERSION}\"")
execute_process(COMMAND ${CMAKE_COMMAND} -E copy_if_different "${CMAKE_BINARY_DIR}/senpatcher_embeds/senpatcher_version.h.tmp" "${CMAKE_BINARY_DIR}/senpatcher_embeds/senpatcher_version.h")
file(REMOVE ${SCMREV_HEADER_PATH}.tmp)
